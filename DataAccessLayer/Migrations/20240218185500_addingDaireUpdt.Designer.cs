// <auto-generated />
using System;
using DataAccessLayer.Concrete;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DataAccessLayer.Migrations
{
    [DbContext(typeof(Context))]
    [Migration("20240218185500_addingDaireUpdt")]
    partial class addingDaireUpdt
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("EntityLayer.Concrete.Aidat", b =>
                {
                    b.Property<int>("AidatID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AidatID"));

                    b.Property<int>("DaireID")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("Odenmis")
                        .HasColumnType("int");

                    b.Property<int>("Tutar")
                        .HasColumnType("int");

                    b.HasKey("AidatID");

                    b.HasIndex("DaireID");

                    b.ToTable("Aidats");
                });

            modelBuilder.Entity("EntityLayer.Concrete.Blok", b =>
                {
                    b.Property<int>("BlokID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BlokID"));

                    b.Property<string>("BlokName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SiteID")
                        .HasColumnType("int");

                    b.HasKey("BlokID");

                    b.HasIndex("SiteID");

                    b.ToTable("Bloks");
                });

            modelBuilder.Entity("EntityLayer.Concrete.Daire", b =>
                {
                    b.Property<int>("DaireID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DaireID"));

                    b.Property<int>("BlokID")
                        .HasColumnType("int");

                    b.Property<int>("DaireNo")
                        .HasColumnType("int");

                    b.Property<string>("ExtraInformation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("KatNumarasi")
                        .HasColumnType("int");

                    b.HasKey("DaireID");

                    b.HasIndex("BlokID");

                    b.ToTable("Daires");
                });

            modelBuilder.Entity("EntityLayer.Concrete.EvSahibiKiraci", b =>
                {
                    b.Property<int>("EvSahibiID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EvSahibiID"));

                    b.Property<int>("DaireID")
                        .HasColumnType("int");

                    b.Property<string>("Mail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Telefon")
                        .HasColumnType("int");

                    b.HasKey("EvSahibiID");

                    b.HasIndex("DaireID");

                    b.ToTable("EvSahibis");
                });

            modelBuilder.Entity("EntityLayer.Concrete.Gider", b =>
                {
                    b.Property<int>("GiderID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("GiderID"));

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("ExtraInformation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HarcamaCinsi")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("HarcananTutar")
                        .HasColumnType("int");

                    b.Property<string>("Sirket")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SiteID")
                        .HasColumnType("int");

                    b.HasKey("GiderID");

                    b.HasIndex("SiteID");

                    b.ToTable("Giders");
                });

            modelBuilder.Entity("EntityLayer.Concrete.Site", b =>
                {
                    b.Property<int>("SiteID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SiteID"));

                    b.Property<string>("Adres")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("BlokSayısı")
                        .HasColumnType("int");

                    b.Property<int>("DaireSayısı")
                        .HasColumnType("int");

                    b.Property<string>("IsitmaTipi")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Sehir")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SiteName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SiteID");

                    b.ToTable("Sites");
                });

            modelBuilder.Entity("EntityLayer.Concrete.SiteYoneticisi", b =>
                {
                    b.Property<int>("YoneticiID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("YoneticiID"));

                    b.Property<string>("Adres")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BlokName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Phone")
                        .HasColumnType("int");

                    b.Property<int>("SiteID")
                        .HasColumnType("int");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("YoneticiID");

                    b.HasIndex("SiteID");

                    b.ToTable("SiteYoneticisis");
                });

            modelBuilder.Entity("EntityLayer.Concrete.User", b =>
                {
                    b.Property<int>("UserID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserID"));

                    b.Property<int>("YoneticiID")
                        .HasColumnType("int");

                    b.Property<string>("email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("userName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("userPassword")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserID");

                    b.HasIndex("YoneticiID");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("EntityLayer.Concrete.Aidat", b =>
                {
                    b.HasOne("EntityLayer.Concrete.Daire", "Daire")
                        .WithMany()
                        .HasForeignKey("DaireID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Daire");
                });

            modelBuilder.Entity("EntityLayer.Concrete.Blok", b =>
                {
                    b.HasOne("EntityLayer.Concrete.Site", "Site")
                        .WithMany()
                        .HasForeignKey("SiteID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Site");
                });

            modelBuilder.Entity("EntityLayer.Concrete.Daire", b =>
                {
                    b.HasOne("EntityLayer.Concrete.Blok", "Blok")
                        .WithMany()
                        .HasForeignKey("BlokID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Blok");
                });

            modelBuilder.Entity("EntityLayer.Concrete.EvSahibiKiraci", b =>
                {
                    b.HasOne("EntityLayer.Concrete.Daire", "Daire")
                        .WithMany()
                        .HasForeignKey("DaireID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Daire");
                });

            modelBuilder.Entity("EntityLayer.Concrete.Gider", b =>
                {
                    b.HasOne("EntityLayer.Concrete.Site", "Site")
                        .WithMany()
                        .HasForeignKey("SiteID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Site");
                });

            modelBuilder.Entity("EntityLayer.Concrete.SiteYoneticisi", b =>
                {
                    b.HasOne("EntityLayer.Concrete.Site", "Site")
                        .WithMany()
                        .HasForeignKey("SiteID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Site");
                });

            modelBuilder.Entity("EntityLayer.Concrete.User", b =>
                {
                    b.HasOne("EntityLayer.Concrete.SiteYoneticisi", "SiteYoneticisi")
                        .WithMany()
                        .HasForeignKey("YoneticiID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SiteYoneticisi");
                });
#pragma warning restore 612, 618
        }
    }
}
